List rendering
===============
We can render list in vue, with the help of v-for directive.

Elements in iteration are expected to have v-bind:key directive.
The element in the v-for directive needs to have an attribute binding on the key attribute.

Array of strings
------------------
export default {
    data(){
      return {
        names: ["George", "Frank", "Steven"]
      }
    }
  }

loop as- 
<li v-for="name in names">
        {{ name }}
      </li>
where names is the array returned by data(), name is an item of names.
Sometimes we want to get hold of index while rendering a list. For that vue provides index in v-for directive

Array of objects
------------------
fullNames: [{
          firstName: "Robert",
          lastName: "Downey"
        }, {
          firstName: "Seth",
          lastName: "Rollins"
        }, {
          firstName: "Thompson",
          lastName: "Alvarez"
        }]

loop as-
<li v-for="(items, index) in fullNames" :key="items.firstName">
        {{ items.firstName }} {{ items.lastName }}
      </li>

Array of array
------------------
hobbies: [{
          name: "Johnson",
          hobby: ["Cooking", "Gardening"]
        }, {
          name: "Mitchell",
          hobby: ["Baking", "Coding"]
        }, {
          name: "Santner",
          hobby: ["Driving", "Playing"]
        }]

loop as-
<div>
    <ul>
      <li v-for="(items, index) in hobbies" :key="items.name">
        <p>{{ items.name }}</p>
        <ul>
          <li v-for="item in items.hobby" :key="item">{{ item }}</li>
        </ul>
      </li>
    </ul>
  </div>

Block of HTML elements
----------------------

Object key value pairs
--------------------------
myInfo: {
          name: "Arkadyuti",
          userId: "cx299",
          domain: "Full Stack"
        }

loop values as-
<li v-for="items in myInfo">{{ items }}</li>

loop keys and values as-
<li v-for="(items, key) in myInfo">{{ key }}: {{ items }}</li>

Note-
======
v-for works on <template></template> as well